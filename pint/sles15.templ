{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "SLES 15 on-demand auto AMI ID",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "SecurityGroups" : {
      "Description" : "EC2 SecurityGroups SUSE Linux Enterprise Server instance",
      "Type" : "List<AWS::EC2::SecurityGroup::GroupName>",
      "ConstraintDescription" : "must be an existing SecurityGroup"
    },
    "ServerInstanceType" : {
      "Description" : "Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "ConstraintDescription" : "must be a valid EC2 instance type"
    }
  },

  "Resources" : {
    "SLESInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType"   : { "Ref" : "ServerInstanceType" },
        "SecurityGroups" : { "Ref" : "SecurityGroups" },
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId": { "Fn::GetAtt": [ "AMIInfo", "Id" ] }
      }
    },
  
    "AMIInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": { "Fn::Join": ["\n", [
            "from botocore.vendored import requests",
            "import json",
            "import cfnresponse",
            "import sys",
            "import re",
            "",
            "def handler(event, context):",
            "  if event['RequestType'] == 'Delete':",
            "    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
            "  if 'ECS' in event and event['ResourceProperties']['ECS'] == '1':",
            "    ecs_tag = '-ecs'",
            "  else:",
            "    ecs_tag = ''",
            "  url = 'https://susepubliccloudinfo.suse.com/v1/amazon/%s/images/active.json' % event['ResourceProperties']['Region']",
            "  try:",
            "    response = requests.get(url)",
            "    response.raise_for_status()",
            "    images = json.loads(response.text)",
            "    for image in images['images']:",
            "      if re.match('{}-v[0-9]*{}-{}-ssd-{}'.format(event['ResourceProperties']['OS'], ecs_tag, event['ResourceProperties']['InstanceType'], event['ResourceProperties']['Architecture']), image['name']):",
            "        print('Found image {} id {}'.format(image['name'], image['id']))",
            "        cfnresponse.send(event, context, cfnresponse.SUCCESS, { 'Id': format(image['id']) } )",
            "        return",
            "    print('Did not find matching image')",
            "  except Exception as e:",
            "    sys.stdout.write('Getting image descriptions failed: ')",
            "    print(e)",
            "    cfnresponse.send(event, context, cfnresponse.FAILED, { 'Error': format(e) })",
            "    return",
            "  cfnresponse.send(event, context, cfnresponse.FAILED, { 'Error': 'No image matches criteria' })"
          ]]}
        },
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Timeout": "30",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] }
      }
    },

    "AMIInfo": {
      "Type": "Custom::AMIInfo",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AMIInfoFunction", "Arn"] },
        "Region": { "Ref" : "AWS::Region" },
        "Architecture": "x86_64",
        "InstanceType": "hvm",
        "ECS": "0",
        "OS": "suse-sles-15"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": ["ec2:DescribeImages"],
              "Resource": "*"
            }]
          }
        }]
      }
    }

  },

  "Outputs" : {
    "HostIP" : {
      "Description" : "Server public IP address",
      "Value" : { "Fn::GetAtt" : [ "SLESInstance", "PublicIp" ] }
    }
  }
}

